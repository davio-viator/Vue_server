generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model action {
  action_id         Int                 @id
  title             String?             @db.VarChar(255)
  text              String?             @db.MediumText
  times             Int?
  frequency         String?             @db.VarChar(50)
  bonus             Boolean?
  character_actions character_actions[]
}

model attack {
  attack_id         Int                 @id
  name              String?             @db.VarChar(50)
  attack_icon       String?             @db.VarChar(50)
  attack_type       String?             @db.VarChar(50)
  range             String?             @db.VarChar(50)
  range_type        String?             @db.VarChar(50)
  hit_dc            String?             @db.VarChar(50)
  damage            String?             @db.VarChar(50)
  damage_icon       String?             @db.VarChar(50)
  notes             String?             @db.VarChar(255)
  bonus             Boolean?
  isSpell           Boolean?
  character_attacks character_attacks[]
}

model card {
  card_id    Int     @id @default(autoincrement())
  name       String  @default("") @db.VarChar(50)
  rank       String  @default("") @db.VarChar(5)
  keywords   String  @default("") @db.VarChar(255)
  ecology    String  @db.MediumText
  strength   String  @db.MediumText
  weakness   String  @db.MediumText
  card_image String  @db.MediumText
  notes      notes[]
}

model character_classes {
  character_id    Int
  class_name      character_classes_class_name
  subclass        String?                      @db.VarChar(50)
  level           Int?
  character_sheet character_sheet              @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_character_classes_character_sheet")

  @@id([character_id, class_name])
}

model character_sheet {
  character_id            Int                       @id
  owner_id                Int
  firstname               String                    @default("") @db.VarChar(50)
  lastname                String                    @default("") @db.VarChar(50)
  sex                     character_sheet_sex       @default(Male)
  race                    String?                   @db.VarChar(50)
  character_icon          String?                   @db.MediumText
  proficiency             Int?
  currentxp               Int?
  speed                   Int?
  inspiration             Boolean?
  spellcaster             Boolean?
  initiative              Int?
  armor                   Int?
  currenthp               Int?
  maxhp                   Int?
  temphp                  Int?
  defences                String?                   @default("") @db.VarChar(255)
  conditions              String?                   @default("") @db.VarChar(255)
  character_actions       character_actions[]
  character_attacks       character_attacks[]
  character_classes       character_classes[]
  user                    user                      @relation(fields: [owner_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_id")
  character_sheet_actions character_sheet_actions[]
  proficiencies           proficiencies?
  saving_throws           saving_throws[]
  senses                  senses?
  skills                  skills[]
  stats                   stats[]

  @@index([owner_id], map: "owner_id")
}

model proficiencies {
  character_id    Int             @id
  armors          String?         @default("None") @db.VarChar(255)
  weapons         String?         @default("None") @db.VarChar(255)
  tools           String?         @default("None") @db.VarChar(255)
  languages       String?         @default("None") @db.VarChar(255)
  character_sheet character_sheet @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_proficiencies_character_sheet")
}

model saving_throws {
  character_id    Int
  name            saving_throws_name
  mod             Int?
  proficient      Boolean?
  character_sheet character_sheet    @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_saving_throws_character_sheet")

  @@id([character_id, name])
}

model senses {
  character_id    Int             @id
  perception      String?         @db.VarChar(50)
  investigation   String?         @db.VarChar(50)
  insight         String?         @db.VarChar(50)
  character_sheet character_sheet @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_senses_character_sheet")
}

model skills {
  character_id    Int
  name            String          @default("") @db.VarChar(50)
  proficient      Boolean         @default(false)
  modifier        String          @default("0") @db.VarChar(5)
  bonus           Int             @default(0)
  character_sheet character_sheet @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction, map: "FK__character_sheet")

  @@id([character_id, name])
}

model stats {
  character_id    Int
  name            stats_name
  score           Int?
  character_sheet character_sheet @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_stats_character_sheet")

  @@id([character_id, name])
}

model user {
  user_id         Int               @id @default(autoincrement())
  username        String            @default("0") @db.VarChar(50)
  email           String            @unique(map: "email") @default("0") @db.VarChar(50)
  password        String            @db.MediumText
  icon            String            @db.Text
  status          user_status       @default(Player)
  firstname       String?           @db.VarChar(50)
  lastname        String?           @db.VarChar(50)
  character_sheet character_sheet[]
  notes           notes[]
}

model notes {
  card_id Int
  user_id Int
  title   String? @db.VarChar(50)
  content String? @db.MediumText
  card    card    @relation(fields: [card_id], references: [card_id], onDelete: NoAction, onUpdate: NoAction, map: "FK__card")
  user    user    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_notes_user")

  @@id([card_id, user_id])
  @@index([user_id], map: "FK_notes_user")
}

model character_actions {
  character_id    Int
  actions_id      Int
  action          action          @relation(fields: [actions_id], references: [action_id], onDelete: NoAction, onUpdate: NoAction, map: "FK__action")
  character_sheet character_sheet @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction, map: "FK__character_sheet_assos")

  @@id([character_id, actions_id])
  @@index([actions_id], map: "FK__action")
}

model character_attacks {
  character_id    Int             @map(" character_id")
  attack_id       Int
  isProficient    Boolean?        @default(false)
  attack          attack          @relation(fields: [attack_id], references: [attack_id], onDelete: NoAction, onUpdate: NoAction, map: "FK__attack")
  character_sheet character_sheet @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction, map: "FK__character_sheet_assos_attacck")

  @@id([character_id, attack_id])
  @@index([attack_id], map: "FK__attack")
}

model c_action {
  id                      Int                       @id
  icon                    String?                   @db.VarChar(500)
  name                    String?                   @db.VarChar(50)
  subtitle                String?                   @db.VarChar(20)
  range                   Int?
  hit_dc                  String?                   @db.VarChar(50)
  damage                  String?                   @db.VarChar(50)
  notes                   String?                   @db.VarChar(50)
  bonus                   Boolean?
  c_attack                c_attack[]
  c_feature               c_feature[]
  c_spell                 c_spell[]
  character_sheet_actions character_sheet_actions[]
}

model c_attack {
  attack_id   Int      @id
  attack_type String   @default("") @db.VarChar(50)
  damage_type String   @default("") @db.VarChar(50)
  location    String   @default("") @db.VarChar(50)
  properties  String?  @default("") @db.VarChar(255)
  proficient  Boolean?
  action_id   Int      @default(0)
  c_action    c_action @relation(fields: [action_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK___action")

  @@index([action_id], map: "FK___action")
}

model c_feature {
  feature_id  Int                  @id
  isLimited   Boolean              @default(false)
  isAttack    Boolean              @default(false)
  damage_type String               @default("") @db.VarChar(50)
  text        String               @db.Text
  frequency   c_feature_frequency?
  quantity    Int?
  action_id   Int
  c_action    c_action             @relation(fields: [action_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK___action_feature")

  @@index([action_id], map: "FK___action_feature")
}

model c_spell {
  spell_id     Int       @id
  level        Int       @default(0)
  damage_type  String    @default("0") @db.VarChar(50)
  cast         String    @default("0") @db.VarChar(50)
  school       String    @default("0") @db.VarChar(50)
  casting_time String    @default("0") @db.VarChar(50)
  components   String    @default("0") @db.VarChar(50)
  duration     String    @default("0") @db.VarChar(50)
  text         String    @db.Text
  isAttack     Boolean   @default(false)
  action_id    Int?
  c_action     c_action? @relation(fields: [action_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__spell__action")

  @@index([action_id], map: "FK__spell__action")
}

model character_sheet_actions {
  character_sheet_id Int
  c_action_id        Int
  c_action           c_action        @relation(fields: [c_action_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__c_action")
  character_sheet    character_sheet @relation(fields: [character_sheet_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction, map: "FK__character_sheet_actions")

  @@id([character_sheet_id, c_action_id])
  @@index([c_action_id], map: "FK__c_action")
}

enum character_classes_class_name {
  barbarian
  bard
  cleric
  druid
  fighter
  monk
  paladin
  ranger
  rogue
  sorcerer
  warlock
  wizard
}

enum character_sheet_sex {
  Male
  Female
}

enum user_status {
  DM
  Player
  Admin
}

enum saving_throws_name {
  strength
  intelligence
  dexterity
  wisdom
  constitution
  charisma
}

enum stats_name {
  strength
  dexterity
  constitution
  intelligence
  wisdom
  charisma
}

enum c_feature_frequency {
  Short_Rest @map("Short Rest")
  Long_Rest  @map("Long Rest")
}
